from __future__ import unicode_literalsimport loggingfrom django.contrib.auth import (login as auth_login, logout as auth_logout, authenticate)from django.contrib.auth.models import Userfrom drf_yasg import openapifrom drf_yasg.utils import swagger_auto_schemafrom rest_framework.permissions import IsAdminUser, AllowAnyfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom apps.accounts.models import UserInfofrom apps.accounts.serializers import UserInfoModelSerializerfrom apps.constants import SUCCESS_CODE, ACCOUNT_LOGIN_ERROR_CODE, ACCOUNT_CREATE_ERROR_CODEerr_log = logging.getLogger('error_logger')msg_log = logging.getLogger('msg_logger')class LoginApiView(APIView):    permission_classes = [AllowAny]    @swagger_auto_schema(        operation_summary='用户登录',        operation_description=""" 用户登录 返回采纳数示例：{"code": 200, "msg": "success"}""",        request_body=openapi.Schema(            type=openapi.TYPE_OBJECT,            properties={                'username': openapi.Schema(                    type=openapi.TYPE_STRING,                    description='用户名'                ),                'password': openapi.Schema(                    type=openapi.TYPE_STRING,                    description='用户密码'                ),                'is_admin': openapi.Schema(                    type=openapi.TYPE_BOOLEAN,                    description='是否管理员'                )            }        ),        tags=['用户']    )    def post(self, request):        username = request.data.get("username")        password = request.data.get("password")        is_admin = request.data.get("is_admin", False)        result = {"code": ACCOUNT_LOGIN_ERROR_CODE, "msg": ""}        if not username or not password:            result["msg"] = "用户名或密码不能为空"            return Response(result)        user = authenticate(username=username, password=password)        if user:            if is_admin != user.is_staff:                result["msg"] = "该用户身份选择错误"                return Response(result)            auth_login(request, user)            return Response({"code": SUCCESS_CODE, "msg": "登录成功"})        else:            result["msg"] = "用户名或密码错误"            return Response(result)class LogoutApiView(APIView):    @swagger_auto_schema(        operation_summary='用户登出',        operation_description="""用户登出""",        tags=['用户']    )    def post(self, request):        auth_logout(request)        return Response({"code": SUCCESS_CODE, "msg": "用户退出成功"})class UserApiView(APIView):    # 管理员才允许添加普通用户    permission_classes = [IsAdminUser]    @swagger_auto_schema(        operation_summary='添加普通用户',        operation_description=""" 管理员添加普通用户""",        request_body=openapi.Schema(            type=openapi.TYPE_OBJECT,            properties={                'username': openapi.Schema(                    type=openapi.TYPE_STRING,                    description='用户名'                ),                'password': openapi.Schema(                    type=openapi.TYPE_STRING,                    description='用户密码'                ),                'tel': openapi.Schema(                    type=openapi.TYPE_STRING,                    description='电话'                ),                'faq': openapi.Schema(                    type=openapi.TYPE_STRING,                    description='备注'                )            }        ),        tags=['用户']    )    def post(self, request):        username = request.data.get("username")        password = request.data.get("password")        tel = request.data.get("tel")        faq = request.data.get("faq")        # todo 校验请求参数        try:            # todo 也可以加盐之类的，这里简单处理            user = User.objects.create_user(username=username, password=password)            msg_log.info(f"管理员{request.user}创建用户{username}({user.id})")        except Exception as e:            print(e)            err_log.error(f"用户名({username})创建失败, err: {e}")            return Response({"code": ACCOUNT_CREATE_ERROR_CODE, "msg": "该用户名已存在"})        UserInfo.objects.create(userid=user, tel=tel, faq=faq)        return Response({"code": SUCCESS_CODE, "msg": ""})    @swagger_auto_schema(        operation_summary='普通用户列表',        operation_description=""" 普通用户列表""",        tags=['用户']    )    def get(self, request):        user_list = UserInfo.objects.filter(userid__is_staff=False).all()        serializer = UserInfoModelSerializer(instance=user_list, many=True)        return Response({"data": serializer.data, "code": SUCCESS_CODE, "msg": ""})